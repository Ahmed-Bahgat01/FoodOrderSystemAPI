// <auto-generated />
using System;
using FoodOrderSystemAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodOrderSystemAPI.DAL.Migrations
{
    [DbContext(typeof(SystemContext))]
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
    [Migration("20230625204321_addphone")]
    partial class addphone
========
    [Migration("20230625203803_seed-Intities")]
    partial class seedIntities
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodOrderSystemAPI.CreditCard", b =>
                {
                    b.Property<int>("CreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditId"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Card_Expiration_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Card_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CreditId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            CreditId = 1,
                            CVV = "333",
                            Card_Expiration_Date = new DateTime(2024, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Card_Number = "1234123412341234",
                            CustomerId = 2
                        },
                        new
                        {
                            CreditId = 2,
                            CVV = "229",
                            Card_Expiration_Date = new DateTime(2026, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Card_Number = "1212121212121212",
                            CustomerId = 3
                        });
                });

            modelBuilder.Entity("FoodOrderSystemAPI.DAL.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("tag")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "tag");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            tag = "vegetarian"
                        },
                        new
                        {
                            ProductId = 1,
                            tag = "local"
                        },
                        new
                        {
                            ProductId = 2,
                            tag = "vegetarian"
                        },
                        new
                        {
                            ProductId = 2,
                            tag = "local"
                        },
                        new
                        {
                            ProductId = 3,
                            tag = "vegetarian"
                        },
                        new
                        {
                            ProductId = 3,
                            tag = "local"
                        },
                        new
                        {
                            ProductId = 4,
                            tag = "local"
                        });
                });

            modelBuilder.Entity("FoodOrderSystemAPI.OrderModel", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.OrderProductModel", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.ProductModel", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Productname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantID")
                        .HasColumnType("int");

                    b.Property<string>("describtion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("offer")
                        .HasColumnType("real");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<float>("rate")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("RestaurantID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Productname = "Flafel",
                            RestaurantID = 100,
                            describtion = "flafel so5na",
                            img = "https://www.holidaysmart.com/sites/default/files/daily/2020/falafel-shs_1500.jpg",
                            offer = 0.45555f,
                            price = 3f,
                            rate = 4f
                        },
                        new
                        {
                            ProductId = 2,
                            Productname = "fool",
                            RestaurantID = 100,
                            describtion = "fool so5n",
                            img = "https://kitchen.sayidaty.net/uploads/small/42/423203a50a85745ee5ff98ff201043f7_w750_h500.jpg",
                            offer = 0f,
                            price = 5f,
                            rate = 2f
                        },
                        new
                        {
                            ProductId = 3,
                            Productname = "Koshary",
                            RestaurantID = 101,
                            describtion = "Koshary so5n",
                            img = "https://i.pinimg.com/originals/4c/37/99/4c37995da59d3e4cdf0da7c57084e2f5.jpg",
                            offer = 0.5f,
                            price = 20f,
                            rate = 4f
                        },
                        new
                        {
                            ProductId = 4,
                            Productname = "kebda",
                            RestaurantID = 102,
                            describtion = "kebda so5na",
                            img = "https://egy-news.net/im0photos/20220919/T16635700676390e53d7bc4b1cbbd92af455195f691image.jpg&w=1200&h=675&img.jpg",
                            offer = 0.1f,
                            price = 30f,
                            rate = 3f
                        });
                });

            modelBuilder.Entity("FoodOrderSystemAPI.ReviewModel", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ReviewModel");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodOrderSystemAPI.AdminModel", b =>
                {
                    b.HasBaseType("FoodOrderSystemAPI.UserModel");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.CustomerModel", b =>
                {
                    b.HasBaseType("FoodOrderSystemAPI.UserModel");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CustomerModel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
                            ConcurrencyStamp = "7c7749b9-80ea-4c81-9482-a60a6f13c906",
========
                            ConcurrencyStamp = "76149bcd-0d3f-4ccf-a7ea-dad579a5a5c2",
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
                            Email = "hassan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "",
                            NormalizedUserName = "testmohamed",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "testmohamed",
                            BirthDate = new DateTime(1999, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerAddress = "Gleem"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
                            ConcurrencyStamp = "bf20cbca-6151-43d3-8b74-101147a27501",
========
                            ConcurrencyStamp = "447beeae-0e13-4da8-8dde-3d6b36b2986c",
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
                            Email = "hamdy@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "",
                            NormalizedUserName = "ramymohamed",
                            PhoneNumber = "1234237890",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "ramymohamed",
                            BirthDate = new DateTime(2002, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerAddress = "Sanstifano"
                        });
                });

            modelBuilder.Entity("FoodOrderSystemAPI.RestaurantModel", b =>
                {
                    b.HasBaseType("FoodOrderSystemAPI.UserModel");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethods")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("RestaurantModel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            AccessFailedCount = 0,
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
                            ConcurrencyStamp = "4aa3a48e-d727-4a4b-a5ab-085089b0f823",
========
                            ConcurrencyStamp = "f65576c6-d925-486d-9309-96072f1fef83",
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
                            Email = "test",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "",
                            NormalizedUserName = "MohamedAhmed",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "MohamedAhmed",
                            Address = "test",
                            Logo = "https://images.deliveryhero.io/image/talabat/restaurants/21167986_13580950369_637438183491941065.jpg?width=180",
                            PaymentMethods = 1,
                            Phone = "+20 111 111 1111",
                            RestaurantName = "Mohamed Ahmed"
                        },
                        new
                        {
                            Id = 101,
                            AccessFailedCount = 0,
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
                            ConcurrencyStamp = "a81a4da6-1a11-4f11-b25c-b8ee2deb3acf",
========
                            ConcurrencyStamp = "d91fb2a0-1264-4b10-8e21-af47e255de1b",
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
                            Email = "test",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "",
                            NormalizedUserName = "KFC",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "KFC",
                            Address = "test",
                            Logo = "https://upload.wikimedia.org/wikipedia/sco/b/bf/KFC_logo.svg",
                            PaymentMethods = 1,
                            Phone = "+20 111 111 1111",
                            RestaurantName = "KFC"
                        },
                        new
                        {
                            Id = 102,
                            AccessFailedCount = 0,
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
                            ConcurrencyStamp = "caed42cc-f776-48d1-99e0-ed07855adec8",
========
                            ConcurrencyStamp = "a3a15e30-2bf3-48b8-b760-446f3bdf07f3",
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
                            Email = "test",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "",
                            NormalizedUserName = "Central",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "Central",
                            Address = "Av. Pedro de Osma 301, Barranco, Lima, Peru",
                            Logo = "https://centralrestaurante.com.pe/assets/images/facebook.jpg",
                            PaymentMethods = 2,
                            Phone = "+51 1 242 8515",
                            RestaurantName = "Central"
                        },
                        new
                        {
                            Id = 103,
                            AccessFailedCount = 0,
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
                            ConcurrencyStamp = "1a43099f-3da7-49e2-acbb-bb3f5bdc313d",
========
                            ConcurrencyStamp = "891e262e-8419-4cad-88fd-b3111c89276b",
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
                            Email = "info@tastybistro.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "",
                            NormalizedUserName = "TheTastyBistro",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "TheTastyBistro",
                            Address = "123 Main Street",
                            Logo = "https://img.freepik.com/free-vector/detailed-chef-logo-template_23-2148987940.jpg?size=626&ext=jpg&ga=GA1.1.118802800.1685470637&semt=ais",
                            PaymentMethods = 1,
                            Phone = "+20 111 111 1111",
                            RestaurantName = "The Tasty Bistro"
                        },
                        new
                        {
                            Id = 104,
                            AccessFailedCount = 0,
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
                            ConcurrencyStamp = "99b05f64-daf7-4511-b558-084708ff1618",
========
                            ConcurrencyStamp = "8ace5a4e-f493-4490-8782-6e169a7e9190",
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
                            Email = "www.ChezGaby.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "",
                            NormalizedUserName = "ChezGaby",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "ChezGaby",
                            Address = "off of Fouad Street, close to the Alexandria Opera House",
                            Logo = "https://www.zumtaugwald.ch/uploads/8iADQWOr/chezgaby_farbig_gross_198.gif",
                            PaymentMethods = 1,
                            Phone = "+20 111 111 1111",
                            RestaurantName = "Chez Gaby"
                        },
                        new
                        {
                            Id = 105,
                            AccessFailedCount = 0,
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
                            ConcurrencyStamp = "5152619c-db35-4ef8-8006-d86eb7569c06",
========
                            ConcurrencyStamp = "4d09ca9b-0c81-4058-8d22-f242867eb309",
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
                            Email = "www.Negro.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "",
                            NormalizedUserName = "Negro",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "Negro",
                            Address = "test",
                            Logo = "https://cerronegrorestaurant.com/wp-content/uploads/2022/06/logo-1.png",
                            PaymentMethods = 1,
                            Phone = "+20 111 111 1111",
                            RestaurantName = "Negro"
                        },
                        new
                        {
                            Id = 106,
                            AccessFailedCount = 0,
<<<<<<<< HEAD:FoodOrderSystemAPI.DAL/Migrations/20230625204321_addphone.Designer.cs
                            ConcurrencyStamp = "0f125164-4437-4247-8f5e-67403c141d4e",
========
                            ConcurrencyStamp = "cee36d6a-f01b-4bbd-a42d-ff41f1b3e499",
>>>>>>>> 77010b8a3492ff0fe224b283a454020e11913702:FoodOrderSystemAPI.DAL/Migrations/20230625203803_seed-Intities.Designer.cs
                            Email = "567 Walnut Lane",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "",
                            NormalizedUserName = "seafoodshack",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "seafoodshack",
                            Address = "test",
                            Logo = "https://img.freepik.com/premium-vector/fresh-seafood-restaurant-premium-logo_187482-625.jpg?w=2000",
                            PaymentMethods = 1,
                            Phone = "+20 111 111 1111",
                            RestaurantName = "The Seafood Shack"
                        });
                });

            modelBuilder.Entity("FoodOrderSystemAPI.CreditCard", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.CustomerModel", "Customer")
                        .WithOne("CustomerCreditCard")
                        .HasForeignKey("FoodOrderSystemAPI.CreditCard", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.DAL.ProductTag", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.ProductModel", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.OrderModel", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.CustomerModel", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.OrderProductModel", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.OrderModel", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodOrderSystemAPI.ProductModel", "Product")
                        .WithMany("orderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.ProductModel", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.RestaurantModel", "restaurant")
                        .WithMany("Products")
                        .HasForeignKey("RestaurantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("restaurant");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.ReviewModel", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.CustomerModel", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodOrderSystemAPI.ProductModel", "Product")
                        .WithMany("reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderSystemAPI.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodOrderSystemAPI.CustomerModel", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.UserModel", null)
                        .WithOne()
                        .HasForeignKey("FoodOrderSystemAPI.CustomerModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodOrderSystemAPI.RestaurantModel", b =>
                {
                    b.HasOne("FoodOrderSystemAPI.UserModel", null)
                        .WithOne()
                        .HasForeignKey("FoodOrderSystemAPI.RestaurantModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodOrderSystemAPI.OrderModel", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.ProductModel", b =>
                {
                    b.Navigation("orderProducts");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.CustomerModel", b =>
                {
                    b.Navigation("CustomerCreditCard")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FoodOrderSystemAPI.RestaurantModel", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
